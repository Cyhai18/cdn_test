(function(e,n){typeof exports=="object"&&typeof module!="undefined"?n(exports,require("@nocobase/client"),require("@nocobase/utils/client"),require("react")):typeof define=="function"&&define.amd?define(["exports","@nocobase/client","@nocobase/utils/client","react"],n):(e=typeof globalThis!="undefined"?globalThis:e||self,n(e["@nocobase/plugin-acl"]={},e["@nocobase/client"],e["@nocobase/utils"],e.react))})(this,function(e,n,t,c){"use strict";var g=Object.defineProperty;var f=(e,n,t)=>n in e?g(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t;var u=(e,n,t)=>(f(e,typeof n!="symbol"?n+"":n,t),t);var d=(e,n,t)=>new Promise((c,a)=>{var l=i=>{try{s(t.next(i))}catch(o){a(o)}},r=i=>{try{s(t.throw(i))}catch(o){a(o)}},s=i=>i.done?c(i.value):Promise.resolve(i.value).then(l,r);s((t=t.apply(e,n)).next())});class a{constructor(){u(this,"rolesManager",new t.Registry)}add(i,o){this.rolesManager.register(i,o)}list(){return this.rolesManager.getEntities()}}const l=c.createContext({role:null});l.displayName="RolesManagerContext";class r extends n.Plugin{constructor(){super(...arguments);u(this,"rolesManager",new a)}load(){return d(this,null,function*(){})}}e.PluginACLClient=r,e.RolesManagerContext=l,e.default=r,Object.defineProperties(e,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
